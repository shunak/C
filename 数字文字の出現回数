
#include <stdio.h>

//文字列str内に含まれる「数字文字」を配列cntに格納
/*
void str_dcount(const char str[], int cnt[])
{
    unsigned i = 0;
    while (str[i]) {
        if (str[i]>='0' && str[i]<='9') {
            cnt[str[i]-'0']++;
            i++;
        }
    }


}

int main(void) {

    int i;
    int dcnt[10] = {0};
    char str[100];
    
    printf("文字列を入力してください:");
    scanf("%s",str);//str[]としなくてよい。
    
    str_dcount(str, dcnt);
    
    puts("数字文字列の出現回数");
    for (i=0; i<10; i++)
        printf("'%d': %d\n",i, dcnt[i]);
    

    return 0;
}
*/

//演習9-7
//文字列を後ろから逆に表示する（"SEC"を受けたら、"CES"と表示する。）関数put_rstringを作成せよ。

/*
unsigned str_length(const char str[])
{
    unsigned len = 0;
    

    while (str[len]){
        len++;
    }
    
    return len;

}


void put_rstring(const char str[]){

    unsigned i;
    
    int len = str_length(str);//ここのlenは上のstr_lengthのブロックの中の値とは違う。ブロック有効範囲に注意。
    
    for (i=1; i<=len; i++) {
        printf("%c",str[len-i]);//この操作の為に、文字列の長さを返す関数を別途用意する。
    }

}


int main(void){

    char str[100];
    
    printf("文字列を入力してください:");
    scanf("%s",str);
    
    put_rstring(str);
    putchar('\n');
    
    
    return 0;
    


}
*/


//演習9-8
//文字列strを逆順に格納する関数("SEC"と受け取ったら"CES"とする)
//void rev_string(char str[])を作成せよ。



unsigned str_length(const char str[])
{
    unsigned len = 0;
    
    while (str[len]) {
        len++;
    }

    return len;

}


void rev_string(char str[]){
    

    unsigned i = 0;
    int len = str_length(str);
    char temp;
    
    for (i=0; i<len/2; i++) {
        temp = str[i];
        str[i] = str[len-i-1];
        str[len-i-1] = temp;
    }
    str[len] = '\0';
    printf("%s",str);
    
    


}

int main(void){
 
    char str[100];
    
    printf("文字列を入力してください:");
    scanf("%s",str);
    
    rev_string(str);
    putchar('\n');
    
    return 0;
    
}








