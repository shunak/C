#include <stdio.h>

//1000以下の素数を求める

int main(void)
{
    
    /*
    int i, no;
    unsigned long counter=0;
    
    for (no=2; no<=1000; no++) {
        for (i=2; i<no; i++) {//(i<noはno-1の整数を表現)
            counter++;
            if (no%i==0)
                break;
        }
        
        
        if (no == i)
            printf("%d\n",no);

        
    }
    

    printf("乗除を行った回数:%lu\n",counter);
    
    */
    
    
    //素数を求めるプログラム第2版
    //「2より大きい2の倍数（2,4,6,・・・）は、素数でない。」事に注目した。
    
    /*
    int i, no;
    unsigned long counter=0;
    
    
    no=2;
    printf("%d\n",no++);
    
    
    
    for (; no<=1000; no+=2) {
        for (i=2; i<no; i++) {//(i<noはno-1の整数を表現)
            counter++;
            if (no%i==0)
                break;
        }
        
        
        if (no == i)
            printf("%d\n",no);
        
        
    }
    
    
    printf("乗除を行った回数:%lu\n",counter);
    
    */
    
    

    //素数を求めるプログラム第3版
    //「3以上の素数は、2より大きい2の倍数(4、6、8、・・・)で割り切れない。」事に注目し、改良。
    /*
    
    int i, no;
    unsigned long counter=0;
    
    
    no=2;
    printf("%d\n",no++);
    
    
    
    for (; no<=1000; no+=2) {
        for (i=3; i<no; i+=2) {
            counter++;
            if (no%i==0)
                break;
        }
    
        
        if (no == i)
            printf("%d\n",no);
        
        
    }
    
    
    printf("乗除を行った回数:%lu\n",counter);
    */

    //素数を求めるプログラム第4版
    //「noより小さい素数での除算において一度も割り切れることがない。」という条件を満たせば素数。
    
    /*
    
    int i, no;
    int prime[500];
    int ptr=0;
    unsigned long counter=0;
    
    prime[ptr++]=2;
    prime[ptr++]=3;
    
    
    for (no=5; no<=1000; no+=2) {
        for (i=1; i<ptr; i++) {
            counter++;
            if ( no % prime[i]==0)
                break;
        }
        
    
        if (ptr == i)
            prime[ptr++]=no;
    
    }
    
    
        for (i=0; i<ptr; i++)
            printf("%d\n",prime[i]);
        
    
    
    
    printf("乗除を行った回数:%lu\n",counter);

    */
    
    
    
    int i, no;
    int prime[500];
    int ptr=0;
    unsigned long counter=0;
    
    prime[ptr++]=2;
    prime[ptr++]=3;
    
    
    for (no=5; no<=1000; no+=2) {
        int flag=0;
        for (i=1; counter++,prime[i]*prime[i]<=no; i++) {//【重要】この行のコンマ演算子のcounterはその右側のprimeの乗算のカウントの為のもの。何故、乗算をカウントするかというと、プログラムが走る事によってかかるコンピュータの負荷というものを乗除の回数によって定量的にな判断材料とするため。
            counter++;
            if ( no % prime[i]==0){
                flag=1;
                break;
            }
            
        }
        
        if (!flag)//flag==0に同じ　論理否定演算子!a aが0であれば1、そうでなければ0(その型はint型)
            
            prime[ptr++]=no;
        
    }
    
  
    for (i=0; i<ptr; i++)
        printf("%d\n",prime[i]);
    
  
    printf("乗除を行った回数:%lu\n",counter);
    
    
    //コンマ演算子
    //a,b aとbを順番に評価し、式全体としてはbの評価値を生成。
    
    
    return 0;
}
