#include <stdio.h>

#define NUMBER 80 //人数の上限

int main(int argc, const char * argv[])
{
    
    /*

    //五人の学生の点数を読み込んで合計点と平均点を表示
    
    int uchida;
    int satoh;
    int sanaka;
    int hiraki;
    int masaki;
    int sum=0;
    
    puts("点数を入力してください。");
    printf("1番:");scanf("%d",&uchida);
    printf("2番:");scanf("%d",&satoh);
    printf("3番:");scanf("%d",&sanaka);
    printf("4番:");scanf("%d",&hiraki);
    printf("5番:");scanf("%d",&masaki);
    
    sum+= uchida;
    sum+= satoh;
    sum+= sanaka;
    sum+= hiraki;
    sum+= masaki;
    
    printf("合計点: %5d\n", sum);
    printf("合計点: %5.1f\n", (double)sum/5);
    
     */
    
    //同じ型の変数の集まりを"背番号"で管理する配列（array）
    
    //普通の配列でないオブジェクト
    //int vx; /*非配列オブジェクト*/
    
    //int vc[5] /*配列オブジェクト*/
//このこの宣言によって、vcは,int型のオブジェクトが5個集まった配列となる。
    //配列の各要素は、配列の名前に続けて添字演算子（subscript operator）と呼ばれる【】の中に
    //背番号を入れてvc[0],vc[1],vc[2],vc[3],vc[4]と表す。
    //この背番号は添字（subscript）と呼ばれる整数値。
    //添字は、先頭から順に0,1,2,3・・・となり、すなわち、配列の《何番目》の要素であるかを表すというよりも、
    //先頭の要素から《何個後ろ》に位置するかを表す。
    //配列を構成する各要素の型を要素型と呼ぶ。勿論、配列vcの要素型はint型。
    
    //配列オブジェクトは、同一の型を持つオブジェクトの集合。
    
    //同じ型のオブジェクトの集合は、配列によって実現。
    
    //配列を宣言する際の要素数は、定数でなければならない。
    
    //配列とfor文
    
    //配列の各要素に先頭から順に1,2,3,4,5を代入して表示
    
    /*
    
    int vc[5]; //要素数が5の配列
    
    vc[0]=1;
    vc[1]=2;
    vc[2]=3;
    vc[3]=4;
    vc[4]=5;
    
    printf("vc[0]=%d\n",vc[0]);
    printf("vc[1]=%d\n",vc[1]);
    printf("vc[2]=%d\n",vc[2]);
    printf("vc[3]=%d\n",vc[3]);
    printf("vc[4]=%d\n",vc[4]);
    
    */
     
    //このプログラムを、for文を用いて書き換えたものが、
    
    //配列の各要素に先頭から順に1,2,3,4,5を代入して表示（for文）
    
    /*
    
    int i;
    int vc[5];
    
    for (i=0; i<5; i++)
        vc[i]=i+1;
    
    for (i=0; i<5; i++)
        printf("vc[%d]=%d\n",i,vc[i]);
    
     */
     
    //このように、配列に対して、規則性のある操作を行うときなどは、for文をうまく使う事によって、
    //プログラムが簡潔になる。
    
    /*
    
    int i;
    double vd[5];
    
    for (i=0; i<5; i++)
        vd[i]=0.0;
    
    for (i=0; i<5; i++)
        printf("vd[%d]=%.1f\n",i,vd[i]);
    
    */
    
    //演習5-1
    //先頭から0,1,2,3を代入。
    /*
    
    int i;
    int vc[5];
    
    for (i=0; i<5; i++)
        vc[i]=i;
    
    for (i=0; i<5; i++)
        printf("vc[%d]=%d\n",i,vc[i]);

     */
    
    
    //演習5-2
    //先頭から5,4,3,2,1を代入
    
    /*
    
    int i;
    int vc[5];
    
    for (i=0; i<5; i++)
        vc[i]=5-i;
    
    for (i=0; i<5; i++)
        printf("vc[%d]=%d\n",i,vc[i]);
    
    */
    
    
    
    //配列の初期化
    
    /*
    
    int i;
    int vc[5]={1,2,3,4,5};
    
    for (i=0; i<5; i++)
        printf("vc[%d]=%d\n",i,vc[i]);
    
     */
    //int vc[]={1,2,3,4,5};
    //このように配列の要素数を与えずに宣言すると、配列の要素数は、初期化子の数に基いて、
    //自動的に5であると解釈される。
    
    //初期化子の足りない要素数は0で初期化する。
    
    //従って、全要素を0で初期化するのであれば、
    //int vc[5]={0};と宣言すればよい。
    
    //初期化子が与えられていない2番目以降の要素は、自動的に0で初期化される。また、
    
    //int vc[5]={0,1}
    
    //と宣言すると、3番目以降の要素が0で初期化されることになる。
    
    //配列のコピー
    
    /*
    int i;
    int va[5]={15,20,30};//{15,20,30,0,0}で初期化
    int vb[5];
    
    for (i=0; i<5; i++)
        vb[i]=va[i];//vaの全ての要素の値を先頭から順に,vbの要素に代入している。
    
    puts(" va vb");
    puts("--------");
    for (i=0; i<5; i++)
        printf("%3d%3d\n",va[i],vb[i]);
     
     */
    //両配列の全要素の値を表示しているが、プログラムの実行結果からも、きちんとコピーできている。
    //このような手続きを踏む理由。
    //C言語では、配列を相互に代入することはできない。
    //よって、全ての要素をひとつひとつ代入しなければならない。
    
    //演習5-3
    /*
    //先頭から順に5,4,3,2,1で初期化
    
    int i;
    int vc[5]={5,4,3,2,1};
    
    for (i=0; i<5; i++)
        printf("vc[%d]=%d\n",i,vc[i]);
    
    */
    
    
    
    //演習5-4
    //配列vaの要素の並びを逆順にしたものをvbにコピー
    /*
    
    int i;
    int va[5]={0,0,30,20,15};//{15,20,30,0,0}で初期化
    int vb[5];
    
    for (i=0; i<5; i++)
        vb[i]=va[i];//vaの全ての要素の値を先頭から順に,vbの要素に代入している。
    
    puts(" va vb");
    puts("--------");
    for (i=0; i<5; i++)
        printf("%3d%3d\n",va[i],vb[i]);

    */
    
    
    //配列の要素に値を読み込む
    /*
    
    int i;
    int vx[5];
    
    for (i=0; i<5; i++){
        printf("vx[%d]:",i);scanf("%d",&vx[i]);
    }
    
    for (i=0; i<5; i++) {
        printf("vx[%d]=%d\n",i,vx[i]);
        }
    
     */
    
    //キーボードから読み込んだ値を格納するためにscanf関数を利用するという手順は、
    //普通の(配列でない)変数の場合と全く同じ。
    
    
    //配列を逆順に並べ替える
    
    //配列の全要素を逆順に並べ替える
    
    /*
    
    int i;
    int vx[5];
    
    for (i=0; i<5; i++){
        printf("vx[%d]:",i);scanf("%d",&vx[i]);
    }
    
    for (i=0; i<2; i++) {
        int temp = vx[i];
        vx[i]    = vx[4-i];
        vx[4-i]  = temp;//二値の交換のためのfor文
    }
    
    for (i=0; i<5; i++)
        printf("vx[%d]=%d\n",i,vx[i]);
    */
    
    
    //演習5-5
    //上のプログラムを書き換えて配列の要素数を8個に変更
    /*
    
    int i;
    int vx[8];
    
    for (i=0; i<8; i++){
        printf("vx[%d]:",i);scanf("%d",&vx[i]);
    }
    
    for (i=0; i<4; i++) {
        int tem = vx[i];
        vx[i]   = vx[7-i];
        vx[7-i] = tem;
    }
    //二値の交換のためのfor文

    
    for (i=0; i<8; i++)
        printf("vx[%d]=%d\n",i,vx[i]);
    
     */
    
    
    //五人の学生の点数を読み込んで合計点と平均点を表示
    
    /*
    
    int i;
    int tensu[5];
    int sum = 0;
    
    puts("点数を入力してください。");
    for (i=0; i<5; i++) {
        printf("%2d番:",i+1);scanf("%d",&tensu[i]);
        sum += tensu[i];
    }
    
    printf("合計点: %5d\n",sum);
    printf("平均点: %5.1f\n",(double)sum/5);
     
     */
    
    //オブジェクト形式マクロ
    //このプログラムのポイントが、#defineという指令。
    //定義する名前であるNUMBERはマクロ名と呼ばれる。
    //マクロ名は、通常の変数名などと区別しやすいように大文字とする習慣がある。
    
    /*
    
    int i;
    int tensu[NUMBER];
    int sum = 0;
    
    puts("点数を入力してください。");
    for (i=0; i<NUMBER; i++) {
        printf("%2d番:",i+1);scanf("%d",&tensu[i]);
        sum += tensu[i];
    }
    
    printf("合計点: %5d\n",sum);
    printf("平均点: %5.1f\n",(double)sum/NUMBER);
     
     */

    //#defineはワープロやエディタでの置換操作。
    //プログラム中NUMBERと書かれた箇所は,5に置換された上で、翻訳実行される。
    //人数を変更したければ、
    //#define NUMBER 8
    //と一箇所だけ書き換えればよい。
    
    //プログラム中に秘密の数値を直接埋め込まず、マクロによって名前を与える。
    //マクロの定義には、必ず注釈を忘れないように。
    
    //五人の学生の点数を読み込んで最高点・最低点を表示
    
    /*
    
    int i;
    int tensu[NUMBER];
    int max,min;
    
    puts("点数を入力してください。");
    for (i=0; i<NUMBER; i++) {
        printf("%2d番:",i+1);scanf("%d",&tensu[i]);
            }
    
    min = max = tensu[0];
    
    for (i=1; i<NUMBER; i++) {
        if (tensu[i]>max) max=tensu[i];
        if (tensu[i]<min) min=tensu[i];
    }
    
    
    printf("最高点:%d\n",max);
    printf("最低点:%d\n",min);
    
 
     
     */
    
    /*
    double a;
    int b;
    
    a=b=1.5;
    
    b=1.5;
    
    a=b;
    
    printf("a=%f\nb=%d\n", a, b);
    
    
    //代入式を評価すると、代入後の左オペランドの型と値になる。
    
    */
    
    //配列とは自由度が高く、扱いやすいラベルである。
    
    //5人の学生の点数を読み込んで60点以上の学生の一覧を表示
    
    /*
    
    int i;
    int snum=0;         //合格者の人数の初期値は0人から
    int tensu[NUMBER];  //NUMBER人の学生の点数
    int succs[NUMBER];  //合格者リスト（合格者の配列）（合格者の添字を格納）
    
    puts("点数を入力してください。");
    for (i=0; i<NUMBER; i++) {
        printf("%2d番：",i+1);scanf("%d",&tensu[i]);
        if (tensu[i]>=60) //点数は数字で表示している。
            succs[snum++]=i;   //合格者リストに追加 =i　で合格者の添字を格納。
    }
    
    
    puts("合格者一覧");
    puts("--------");
    for (i=0; i<snum; i++) {
        printf("%2d番（%3d点）\n", succs[i]+1, tensu[succs[i]]);
    }
    
    */
    
    //点数別分布グラフ
    
    /*
    
    int i, j;
    int num;            //実際の人数
    int tensu[NUMBER];  //学生の点数
    int bunpu[11] = {0};//分布 11個の全要素を0で初期化している。
    
    printf("人数を入力してください：");
    do{
        scanf("%d",&num);
        if (num<1 || num>NUMBER)//論理OR演算子 a||b aとbの一方でも非0であれば1、そうでなければ0(その型はint型)
            printf("\a要【1以上%d以下】:",NUMBER);
    } while (num<1 || num>NUMBER);
    
    puts("点数を入力してください。");
    for (i=0; i<num; i++) {
        printf("%2d番:",i+1);
        do{
            scanf("%d",&tensu[i]);
            if (tensu[i]<0 || tensu[i]>100)
                printf("\a要【0以上100以下】:");
        } while (tensu[i]<0 || tensu[i]>100);
         bunpu[tensu[i]/10]++;
    }
    
    puts("\n□　分布グラフ □");
    printf("    100:");
    for (j=0; j<bunpu[10]; j++)
        putchar('*');
    putchar('\n');
    
    for (i=9; i>=0; i--) {
        printf("%3d-%3d:", i*10, i*10+9);
        for (j=0; j<bunpu[i]; j++)
            putchar('*');
        putchar('\n');
    }
    
     */
    
    //多次元配列
    
    /*
    
    int i, j;
    int ma[2][3]={{1,2,3},{4,5,6}};
    int mb[2][3]={{6,3,4},{5,1,2}};
    int mc[2][3]={0};//全要素を0で初期化している。
    
    for (i=0; i<2; i++)
        for (j=0; j<3; j++)
            mc[i][j] = ma[i][j] + mb[i][j];
    
    for (i=0; i<2; i++){
        for (j=0; j<3; j++)
            printf("%3d",mc[i][j]);
    putchar('\n');
    
    }
    
     */

    //このプログラムでの配列ma.mb,mcは一般に二次元配列と呼ばれる。
    //二次元以上の配列を多次元配列と呼ぶ。
    
    //初期化子がきちんと与えられていれば、配列の宣言では、最初の要素数を省略する事が可能。
    // int ma[][3]={{1,2,3},{4,5,6}};
    
    //初期化子の内側の括弧を省略する事も可能
    // int ma[2][3]={1,2,3,4,5,6};
    
    //初期化子の足りない要素が0で初期化されるという規則は、多次元配列に関しても成立する。
    // int [2][3]={1,2,3,4,5};という宣言は、
    // int [2][3]={{1,2,3}{4,5,0}};
    //とみなされる。
    
    // int [2][3]={{1,2}{4}};は
    // int [2][3]={{1,2,0}{4,0,0}};
    // という宣言と同等。
    
    //演習5-7　
    //行列の積を求めるプログラム
    
    int i, j, k;
    int x[2][3]={{1,2,3},{4,5,6}};
    int y[3][2]={{1,5},{5,3},{8,1}};
    int xy[2][2]={0};//全要素を0で初期化している。xy[2][2]という、要素数が縦に2、横に2の配列。今はこの配列には0が格納されている状態。下のxy[i][j] += x[i][j] * y[j][i]とは、xy[i][j] = xy[i][j] + x[i][j] * y[j][i];を意味し、0が格納されている配列xy[i][j]にx[i][j] * y[j][i]の値を加えていくというイメージ。
    
    for (i=0; i<2; i++)
        for (j=0; j<2; j++)
            for (k=0; k<3; k++)
                xy[i][j] += x[i][k] * y[k][j];
    
    
    for (i=0; i<2; i++){
        for (j=0; j<2; j++)
            printf("%3d",xy[i][j]);
        putchar('\n');
    
    }

    
    //複合代入演算子
    //sum+=no
    //は,sumにnoを加える。すなわち、sumの値はnoだけ増える事になる。
    //sum=sum+noの事。
    
    
    
    
    // mc[k][m] = {{ma[0][j]mb[j][0],ma[0][j]mb[j][1]},{ma[1][j]mb[j][0],ma[1][j]mb[j][1]}};
    
    
    
    
    return (0);
}
