
#include <stdio.h>

int main(int argc, const char * argv[])



{

    //読み込んだ整数値を0までカウントダウン
    //List4-7
    /*
    
    
    int no;
    
    printf("整数を入力してください:");scanf("%d",&no);
    
    while(no>=0){
        printf("%d", no);
        no--;
    }
    putchar('\n');
    
     */
    
    //演習4-6
    //上記のプログラムを負の値を読み込んだ時に改行しないように書き換えよ。
    
    /*
    int no;
    
    printf("整数を入力してください:");scanf("%d",&no);
    
    if(no>0){
        while(no>=0){
            printf("%d",no);
            no--;
        }
        putchar('\n');
    }
    
    
    else{
        while(no>=0){
            printf("%d",no);
            no--;
        }
    }
    
     */
    
    
    //if文
    //式を評価して、その値が非0であれば文を実行する。
    //つまり、if(no>=0)を付加することで、no>=0なら、
    //putcharの文が実行つまり、改行がされる。
    //しかし、no>=0を満たさない、つまり、負の値が入力された時点で、
    //if文の内容である、putcharの改行指示文は実行されない。
    //つまり、改行されなくなる。
    
  
    
    
    
    
    //文字定数
    //'a''B'のように、文字を一重引用符で囲んだものを文字定数と呼ぶ。
    
    //文字を表示するのがputchar関数。
    //唯一の実引数には、表示する文字を与える。
    //このプログラムでは'\n'を表示するので、改行が行われる。
    //読み込んだ値が0の時は、while文の繰り返しは1回だけ行われて、0と表示される。
    //負の値を読み込んだ時は、while文が素通りされて、改行だけが行われる。
    
    
    //while文
    //while文は、式を評価した値が0でない限り、文を繰り返し実行する。
   
    //減分演算子を用いた手短な表現
    //List4-8
    /*
    
    int no;
    
    printf("正の整数を入力してください:");scanf("%d",&no);
    
    while(no>=0)
        printf("%d",no--);
    putchar('\n');
    
     */

    //後置減分演算子a--の説明
    //aの値を一つだけ減らす（式全体を評価すると、減少前の値になる。）
    //したがって、no--を表示する際には、
    //(a)noの値を表示
    //(b)その直後にnoの値がデクリメントされる。
    //という手順が踏まれる。
    
    
    //演習4-7
    //上記プログラムを0ではなく、1までカウントダウンするプログラム作成せよ。

    
    /*
    
    int no;
    
    printf("正の整数を入力してください:");scanf("%d",&no);
    
    while(no>=1)
        printf("%d",no--);
    putchar('\n');
    
    */
    
    //カウントアッププログラム
    //List4-9
    /*
    
    int i,no;
    
    printf("正の整数を入力してください:");scanf("%d",&no);
    
    i=0;
    while(i<=no)
        printf("%d",i++);
    putchar('\n');
     
     */
    
    
    //演習4-8
    //上記プログラムを以下のように書き換えよ
    //0からではなく1からのカウントアップを行う。
    //入力された値が0以下であるときには、改行を行わない。
    
    /*
    
    int i,num;
    
    printf("正の整数を入力してください:");scanf("%d",&num);
    
    i=1;

    
    if (num>0) {
        while(i<=num)
            printf("%d",i++);
        putchar('\n');
    }
    
    else {
            while(i<=num)
                printf("%d",i++);
     
    }

     */
     
     
    //演習4-9
    //読み込まれた整数値以下である正の偶数を昇順に表示するプログラムを作成せよ。
    /*
    
    int i,num;
    
    printf("整数を入力してください:");scanf("%d",&num);
    
    i=2;
    while(i<num){
            printf("%d",i);
        i+=2;//複合代入演算子+= i=i+2の意味
    }
        putchar('\n');
*/
    
    
    //演習4-10
    //整数値以下である正の2のべき乗の数を昇順に表示するプログラムを作成せよ。
    /*
    
    int i,num;
    
    printf("整数を入力してください:");scanf("%d",&num);
    
    i=2;
    while(i<num){
        printf("%d",i);
        i*=2;//複合代入演算子+= i=i^2の意味
    }
    putchar('\n');
    */
    
    
    
    //読み込んだ整数の個数だけ＊を表示
    //List4-10
    
    /*
    int no;
    
    printf("正の整数を入力してください:");scanf("%d",&no);
    
    while(no-->0)
        putchar('*');
    putchar('\n');
    */
    
    
    //演習4-11
    //読み込んだ整数値の個数だけ*を縦に連続して表示するプログラムを作成せよ。
    //なお、0以下の整数が入力された場合は、何も表示しない事。
    
    /*
    
    int no;
    
    printf("正の整数を入力してください:");scanf("%d",&no);
    
    if(no>0){
    while(no-->0){
        putchar('*');
    putchar('\n');
    }
    }
    
    if(no<0)//もしもno<なら、したに続くreturn 0; つまり、0を返せということ。
     
     */
    
    //ということを念頭に、演習4-9をやり直すと、
    
    /*
    int i,num;
    
    printf("整数を入力してください:");scanf("%d",&num);
    
    i=1;
    
    
    if (num>0) {
        while(i<=num)
            printf("%d",i++);
        putchar('\n');
    }
    
    else
    
     */
   //これが物凄くシンプルでいい。
//つまり、else return 0
        
    
    //前置増分演算子・前置減分演算子
    //List4-11
    
    int i=0;
    int sum=0;
    int num, tmp;
    
    printf("整数は何個ですか:");scanf("%d",&num);
    
    while(i<num){
        printf("No.%d:",++i);scanf("%d",&tmp);
    sum+=tmp;
    }
    
    printf("合計値:%d\n",sum);
    printf("平均値:%.2f\n",(double)sum/num);//（double）は明示的な型変換。キャスト。（）をキャスト演算子という。
    //キャスト演算子　（型名）a aの値で型名で指定された型の値に変換したものを生成。
    //%.2f　「続く実引数を小数第二位までの実数で表示せよ」という意味。
    
    
    
    //前置増分（減分）演算子
    //++(--)a aの値を一つだけ増やす（減らす）（式全体を評価すると、増加後の値となる。）
    
    //前置増分演算子は、後置のそれとインクリメントを行うタイミングが異なる。すなわち、++iを表示する場合には、
    // (1)iの値がインクリメントされる。
    // (2)iの値を表示。
    //という手順が踏まれる。
    //インクリメントしてから表示するのか、表示してからインクリメントするのかの違い。
    
    
    
    
    
    
    
    
    
    
    
    
        
        
        
        
    return 0;
}
