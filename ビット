
//C言語でのビットの定義
//二種類の値の内の一つを持ちうるオブジェクトを保持するために十分な大きさをもつ実行環境でのデータ記憶域の単位。

//整数の内部を覗くプログラム


//unsigned型のビット構成を表示

/*
//整数x中のセットされたビット数を返す関数を定義
int count_bits(unsigned x)
{
    int count = 0;
    while (x) {
        if (x&1U)
        count++;
        x>>=1;
    }
    return (count);
}

//unsigned型のビット数を返す関数を定義
int int_bits(void)
{
    return (count_bits(~0U));
}

//unsigned型のビット内容を表示する関数を定義
void print_bits(unsigned x)
{
    int i;
    for(i=int_bits()-1; i>=0; i--)
        putchar(((x>>i)&1U)? '1' : '0');
}

int main(void)
{
    unsigned nx;
    
    printf("非負の整数を入力してください:");scanf("%u",&nx);
    
    print_bits(nx);
    putchar('\n');
    
    return 0;
}
*/


//unsigned型の論理積・論理和・排他的論理和・1の補数表示
/*
int count_bits(unsigned x)
{
    int count = 0;
    while (x) {
        if (x&1U)
            count++;
        x>>=1;
    }
    return (count);
}

//unsigned型のビット数を返す関数を定義
int int_bits(void)
{
    return (count_bits(~0U));
}

//unsigned型のビット内容を表示する関数を定義
void print_bits(unsigned x)
{
    int i;
    for(i=int_bits()-1; i>=0; i--)
        putchar(((x>>i)&1U)? '1' : '0');
}

int main(void){

    unsigned na, nb;
    
    puts("二つの非負の整数を入力してください。");
    printf("整数A:");scanf("%u", &na);
    printf("整数B:");scanf("%u", &nb);
    
    
    printf("\nA         =");    print_bits(na);
    printf("\nB         =");    print_bits(nb);
    printf("\nA & B     =");    print_bits(na & nb);
    printf("\nA | B     =");    print_bits(na | nb);
    printf("\nA ^ B     =");    print_bits(na ^ nb);
    printf("\n~A        =");    print_bits(~na);
    printf("\n~B        =");    print_bits(~nb);
    
    return 0;
    
}

*/



int count_bits(unsigned x)
{
    int count = 0;
    while (x) {
        if (x&1U)
            count++;
        x>>=1;
    }
    return (count);
}

//unsigned型のビット数を返す関数を定義
int int_bits(void)
{
    return (count_bits(~0U));
}

//unsigned型のビット内容を表示する関数を定義
void print_bits(unsigned x)
{
    int i;
    for(i=int_bits()-1; i>=0; i--)
        putchar(((x>>i)&1U)? '1' : '0');
}

int main(void){

    unsigned nx, no;
    
    printf("非負の整数を入力してください:");scanf("%u", &nx);
    printf("何ビットシフトしますか:");scanf("%u",&no);
    
    printf("\n整数                  =");    print_bits(nx);
    printf("\n左にシフトした値        =");    print_bits(nx<<no);
    printf("\n右にシフトした値        =");    print_bits(nx>>no);
    putchar('\n');

    return 0;

}



//演習7-1
//符号無し整数を左右にシフトした値が、2のべき乗で乗算や除算と等しくなる事を確認するプログラム

//2のno乗を返す

/*--- 整数x中のセットされたビット数を返す ---*/
int count_bits(unsigned x){
    int	 count = 0;
    while (x) {
        if (x & 1U) count++;		// 1U(0000000000000001)との論理積でカウント増やす
        x >>= 1;					// ~0U(1111111111111111)を毎回1ずつビットシフト。空いたビットには0が詰まっていく。
    }								// ビットシフトを繰り返して0000000000000000になったらループ終了
    return (count);					// 全部合致するからカウントがビット数になっている
}

/*--- unsigned型のビット数を返す ---*/
int int_bits(void){
    return (count_bits(~0U));	    // 0Uの反転だから1111111111111111となり、count_bitsへ
}

/*--- unsigned型のビット内容を表示 ---*/
void print_bits(unsigned x){
    int	 i;
    for (i = int_bits() - 1; i >= 0; i--){		// (ビット数-1)から0まで(ビット数)回ループ
        putchar(((x >> i) & 1U) ? '1' : '0');	// ビットの左側から1Uと論理積で1か0に
    }
}

int main(void){
    unsigned  nx, no, i;
    
    printf("非負の整数を入力してください：");scanf("%u", &nx);
    printf("何ビットシフトしますか：");scanf("%u", &no);
    
    printf("\n整数　　　　　　 ＝ ");print_bits(nx);
    
    printf("\n左にシフトした値 ＝ ");print_bits(nx << no);
    
    for(i = 0; i < no; i++){//i<noの間、nx*=2の演算を行う。
        nx *= 2;
    }
    printf("\n 2を%3d回掛けた値 ＝ ", no);print_bits(nx);
    
    
    printf("\n 右にシフトした値 ＝ ");print_bits(nx >> no);
    for(i = 0; i < no; i++){
        nx /= 2;
    }
    printf("\n 2で%3d回割った値 ＝ ", no);print_bits(nx);
    
    
    
    
    
    putchar('\n');
    
    return 0;
}



//演習7-2
//符号無し整数xを右にnビット回転した値を返す関数rrotateと、左にnビット回転した値を返す関数lrotateを作成せよ。


//整数xの中のセットされたビットを返す。
int count_bits(unsigned x){
    int count=0;
    
    while (x) {
        if (x&1U)//1Uとの論理積でカウントを増やす。
            count++;
            x>>=1;//~0U(1111111111111111)を毎回1ビットずつシフト。ビットシフトを繰り返して0000000000000000になったらループ終了。
        }
    
    return (count);

}

//unsigned型のビット数を返す。

int int_bits(void){

    return (count_bits(~0U));//0Uの反転だから1111111111111111となり、count_bitsへ
}


//unsigned型のビット内容を表示
void print_bits(unsigned x){
    int i;
    for (i=int_bits()-1; i>=0; i--) {//ビット数-1から0までビット数回ループする。
        putchar(((x>>i)&1U)? '1':'0');
    }

}

//符号無し整数xを右にnビット回転した値を返す。
unsigned rrotate(unsigned x, int n){
    int i = int_bits();
    return((x>>n)|(x<<(i-n)));
}


//符号無し整数xを左にnビット回転した値を返す。
unsigned lrotate(unsigned x, int n){
    int i = int_bits();
    return((x<<n)|(x>>(i-n)));
}

int main(void){

    unsigned nx, no;

    printf("非負の整数を入力してください:");scanf("%u",&nx);
    printf("何ビット回転しますか:");scanf("%u",&no);
    
    printf("\n整数nx=");print_bits(nx);
    
    printf("\nrrotateによる値=");print_bits(rrotate(nx,no));
    printf("\nlrotateによる値=");print_bits(lrotate(nx,no));
    
    putchar('\n');



    return 0;


}

